/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.7.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package reviewme.api;

import reviewme.dto.GroupDetailResponse;
import reviewme.dto.GroupReviewResponse;
import reviewme.dto.ProblemDetails;
import reviewme.dto.ReviewCreationRequest;
import reviewme.dto.SingleReviewResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", comments = "Generator version: 7.7.0")
@Validated
@Tag(name = "review", description = "the review API")
public interface ReviewsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /reviews : 리뷰를 작성합니다.
     *
     * @param reviewCreationRequest  (required)
     * @return 리뷰가 성공적으로 생성되었습니다. (status code 201)
     */
    @Operation(
        operationId = "createReview",
        summary = "리뷰를 작성합니다.",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "201", description = "리뷰가 성공적으로 생성되었습니다.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/reviews",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> createReview(
        @Parameter(name = "ReviewCreationRequest", description = "", required = true) @Valid @RequestBody ReviewCreationRequest reviewCreationRequest
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reviews : 그룹 리뷰 조회를 요청합니다.
     *
     * @param groupAccessCode 그룹 리뷰 확인용 코드 (required)
     * @return 코드에 해당하는 리뷰 목록을 반환합니다. (status code 200)
     *         or 그룹 접근 코드가 존재하지 않을 때 발생합니다. (status code 400)
     */
    @Operation(
        operationId = "findAllGroupReviews",
        summary = "그룹 리뷰 조회를 요청합니다.",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "200", description = "코드에 해당하는 리뷰 목록을 반환합니다.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupReviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "그룹 접근 코드가 존재하지 않을 때 발생합니다.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reviews",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GroupReviewResponse> findAllGroupReviews(
        @NotNull @Parameter(name = "groupAccessCode", description = "그룹 리뷰 확인용 코드", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "groupAccessCode", required = true) String groupAccessCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"reviews\" : [ { \"createdAt\" : \"2021-08-01\", \"keywords\" : [ { \"id\" : 1, \"content\" : \"의견을 잘 조율해요\" }, { \"id\" : 2, \"content\" : \"활발하게 토의해요\" } ], \"contentPreview\" : \"산초는 리뷰미 프로젝트에서 열심히 일했습니다. 이건 지피티가 아니라 진짜 리뷰입니다. ...\", \"id\" : 1258 }, { \"createdAt\" : \"2021-08-01\", \"keywords\" : [ { \"id\" : 1, \"content\" : \"의견을 잘 조율해요\" }, { \"id\" : 2, \"content\" : \"활발하게 토의해요\" } ], \"contentPreview\" : \"산초는 리뷰미 프로젝트에서 열심히 일했습니다. 이건 지피티가 아니라 진짜 리뷰입니다. ...\", \"id\" : 1258 } ], \"revieweeName\" : \"산초\", \"projectName\" : \"리뷰미\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instance\" : \"/reviews\", \"detail\" : \"생성에 실패했습니다.\", \"type\" : \"about:blank\", \"title\" : \"Bad Request\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reviews/write : 리뷰 작성을 위한 질문을 조회합니다.
     *
     * @param reviewRequestCode 그룹 리뷰 확인용 코드 (required)
     * @return 질문 목록을 반환합니다. (status code 200)
     *         or 그룹 접근 코드가 존재하지 않을 때 발생합니다. (status code 400)
     */
    @Operation(
        operationId = "findQuestions",
        summary = "리뷰 작성을 위한 질문을 조회합니다.",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "200", description = "질문 목록을 반환합니다.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GroupDetailResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "그룹 접근 코드가 존재하지 않을 때 발생합니다.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reviews/write",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GroupDetailResponse> findQuestions(
        @NotNull @Parameter(name = "reviewRequestCode", description = "그룹 리뷰 확인용 코드", required = true, in = ParameterIn.QUERY) @Valid @RequestParam(value = "reviewRequestCode", required = true) String reviewRequestCode
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"keywords\" : [ { \"id\" : 1, \"content\" : \"의견을 잘 조율해요\" }, { \"id\" : 2, \"content\" : \"활발하게 토의해요\" } ], \"revieweeName\" : \"산초\", \"questions\" : [ { \"id\" : 16, \"content\" : \"소프트스킬은 어떤가요?\" }, { \"id\" : 24, \"content\" : \"팀원과의 관계는 어떤가요?\" } ], \"projectName\" : \"리뷰미\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instance\" : \"/reviews\", \"detail\" : \"생성에 실패했습니다.\", \"type\" : \"about:blank\", \"title\" : \"Bad Request\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /reviews/{reviewId} : 리뷰를 조회합니다.
     *
     * @param groupAccessCode 그룹 리뷰 확인용 코드 (required)
     * @param reviewId 리뷰 ID (required)
     * @return ID에 해당하는 리뷰를 반환합니다. (status code 200)
     *         or 리뷰 ID가 존재하지 않거나, 코드가 일치하지 않을 때. (status code 400)
     */
    @Operation(
        operationId = "findReview",
        summary = "리뷰를 조회합니다.",
        tags = { "review" },
        responses = {
            @ApiResponse(responseCode = "200", description = "ID에 해당하는 리뷰를 반환합니다.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = SingleReviewResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "리뷰 ID가 존재하지 않거나, 코드가 일치하지 않을 때.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = ProblemDetails.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/reviews/{reviewId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<SingleReviewResponse> findReview(
        @NotNull @Parameter(name = "groupAccessCode", description = "그룹 리뷰 확인용 코드", required = true, in = ParameterIn.HEADER) @RequestHeader(value = "groupAccessCode", required = true) String groupAccessCode,
        @Parameter(name = "reviewId", description = "리뷰 ID", required = true, in = ParameterIn.PATH) @PathVariable("reviewId") Integer reviewId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"createdAt\" : \"2021-08-01\", \"keywords\" : [ { \"id\" : 1, \"content\" : \"의견을 잘 조율해요\" }, { \"id\" : 2, \"content\" : \"활발하게 토의해요\" } ], \"contents\" : [ { \"id\" : 36, \"question\" : \"소프트스킬은 어떤가요?\", \"answer\" : \"산초는 리뷰미 프로젝트에서 열심히 일했습니다. 이건 지피티가 아니라 진짜 리뷰입니다. ...\" }, { \"id\" : 48, \"question\" : \"팀원과의 관계는 어떤가요?\", \"answer\" : \"팀원과 관계 아주 좋아요~\" } ], \"revieweeName\" : \"산초\", \"id\" : 1258, \"projectName\" : \"리뷰미\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"instance\" : \"/reviews\", \"detail\" : \"생성에 실패했습니다.\", \"type\" : \"about:blank\", \"title\" : \"Bad Request\", \"status\" : 400 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
